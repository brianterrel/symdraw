{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name symdraw.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core}, :uses nil, :defs {swap-color {:protocol-inline nil, :meta {:file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 84, :column 7, :end-line 84, :end-column 17, :arglists (quote ([event]))}, :name symdraw.core/swap-color, :variadic false, :file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :end-column 17, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event]))}, coords-from-event {:protocol-inline nil, :meta {:file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 15, :column 7, :end-line 15, :end-column 24, :arglists (quote ([event]))}, :name symdraw.core/coords-from-event, :variadic false, :file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :end-column 24, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event]))}, circles-from-list {:protocol-inline nil, :meta {:file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 63, :column 7, :end-line 63, :end-column 24, :arglists (quote ([radius points])), :doc "Make circles from a list of points"}, :name symdraw.core/circles-from-list, :variadic false, :file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :end-column 24, :method-params ([radius points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([radius points])), :doc "Make circles from a list of points"}, svg-mouse-move-handler {:protocol-inline nil, :meta {:file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 78, :column 7, :end-line 78, :end-column 29, :arglists (quote ([event]))}, :name symdraw.core/svg-mouse-move-handler, :variadic false, :file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :end-column 29, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event]))}, symdraw {:protocol-inline nil, :meta {:file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 89, :column 7, :end-line 89, :end-column 14, :arglists (quote ([]))}, :name symdraw.core/symdraw, :variadic false, :file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, slider-handler {:protocol-inline nil, :meta {:file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 81, :column 7, :end-line 81, :end-column 21, :arglists (quote ([]))}, :name symdraw.core/slider-handler, :variadic false, :file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, svg-click-handler {:protocol-inline nil, :meta {:file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 75, :column 7, :end-line 75, :end-column 24, :arglists (quote ([event]))}, :name symdraw.core/svg-click-handler, :variadic false, :file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :end-column 24, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event]))}, magnitude {:protocol-inline nil, :meta {:file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 31, :column 7, :end-line 31, :end-column 16, :arglists (quote ([point-1 point-2])), :doc "Returns the Euclidean distance between two points"}, :name symdraw.core/magnitude, :variadic false, :file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :end-column 16, :method-params ([point-1 point-2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point-1 point-2])), :doc "Returns the Euclidean distance between two points"}, app-state {:name symdraw.core/app-state, :file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 10, :column 1, :end-line 10, :end-column 19, :meta {:file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 10, :column 10, :end-line 10, :end-column 19}}, sym-points {:protocol-inline nil, :meta {:file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 40, :column 7, :end-line 40, :end-column 17, :arglists (quote ([point center sym])), :doc "Given a point, find the points corresponding to it by a given symmetry"}, :name symdraw.core/sym-points, :variadic false, :file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :end-column 17, :method-params ([point center sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 3, :fn-var true, :arglists (quote ([point center sym])), :doc "Given a point, find the points corresponding to it by a given symmetry"}, square {:protocol-inline nil, :meta {:file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 29, :column 7, :end-line 29, :end-column 13, :arglists (quote ([x]))}, :name symdraw.core/square, :variadic false, :file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, create-circle {:protocol-inline nil, :meta {:file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :line 24, :column 7, :end-line 24, :end-column 20, :arglists (quote ([radius center]))}, :name symdraw.core/create-circle, :variadic false, :file "/home/brian/Clojure/symdraw/src/symdraw/core.cljs", :end-column 20, :method-params ([radius center]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([radius center]))}}, :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:y :min :r :stroke :color :button :stroke-opacity :fill :circle :width :circles :type :on-click :title :sym :center :div :stroke-width :max :cx :id :cy :on-mouse-move :svg :br :x :input :h1 :on-change :rect :p :fill-opacity :height}, :order [:title :circles :sym :color :circle :r :cx :cy :fill :center :div :h1 :p :br :input :id :type :min :max :on-change :svg :width :height :rect :y :stroke :stroke-opacity :on-click :stroke-width :x :fill-opacity :on-mouse-move :button]}, :doc nil}